<?php

declare(strict_types = 1);

namespace Drupal\helfi_navigation\Plugin\rest\resource;

use Drupal\Core\Config\ConfigFactory;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Language\LanguageManagerInterface;
use Drupal\Core\Url;
use Drupal\helfi_api_base\Environment\EnvironmentResolver;
use Drupal\helfi_navigation\ApiManager;
use Drupal\helfi_navigation\Menu\MenuTreeBuilder;
use Drupal\rest\Plugin\ResourceBase;
use Drupal\rest\ResourceResponse;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Represents Global menu records as resources.
 *
 * @RestResource(
 *   id = "helfi_global_mobile_menu",
 *   label = @Translation("Global mobile menu"),
 *   uri_paths = {
 *     "canonical" = "/api/v1/global-mobile-menu",
 *   }
 * )
 */
final class GlobalMobileMenu extends ResourceBase {

  /**
   * The global navigation service.
   *
   * @var \Drupal\helfi_navigation\ApiManager
   */
  protected ApiManager $apiManager;

  /**
   * The Languagemanager.
   *
   * @var \Drupal\Core\Language\LanguageManagerInterface
   */
  protected LanguageManagerInterface $languageManager;

  /**
   * The Configfactory.
   *
   * @var Drupal\Core\Config\ConfigFactory
   */
  protected ConfigFactory $configFactory;

  /**
   * The environmentresolver.
   *
   * @var Drupal\helfi_api_base\Environment\EnvironmentResolver
   */
  protected EnvironmentResolver $environmentResolver;

  /**
   * The Menutreebuilder.
   *
   * @var Drupal\helfi_navigation\Menu\MenuTreeBuilder
   */
  protected MenuTreeBuilder $localMenuTreeBuilder;

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) : self {
    $instance = parent::create(
      $container,
      $configuration,
      $plugin_id,
      $plugin_definition
    );
    $instance->configFactory = $container->get('config.factory');
    $instance->languageManager = $container->get('language_manager');
    $instance->apiManager = $container->get('helfi_navigation.api_manager');
    $instance->environmentResolver = $container->get('helfi_api_base.environment_resolver');
    $instance->localMenuTreeBuilder = $container->get('helfi_navigation.menu_tree_builder');

    return $instance;
  }

  /**
   * Callback for GET requests.
   *
   * @return \Drupal\rest\ResourceResponse
   *   The response.
   */
  public function get(): ResourceResponse {
    $langcode = $this->languageManager
      ->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)
      ->getId();

    try {
      $apiResponse = $this->apiManager->get($langcode, 'main', []);
    }
    catch (\Exception $exception) {
      return new ResourceResponse([], 404);
    }

    // If authorization key is set, just return the menu without enrichment.
    if ($this->apiManager->isAuthorized()) {
      return new ResourceResponse(json_decode(json_encode($apiResponse->data), TRUE), 200);
    }

    $environment = $this->environmentResolver->getActiveEnvironment();
    $site_name = $this->configFactory->get('system.site')->get('name');
    $project_name = $environment->getId();

    // Create menu tree and add data to the local menu.
    $menuTree = $this->getTreeFromMainMenu();
    $menuTree['is_injected'] = TRUE;

    // Commented lines are present in the api request,
    // most likely generated by the drupal api module.
    $site_data = (object) [
      // 'content_translation_changed' => '',
      // 'content_translation_created' => '',
      // 'content_translation_created' => '',
      // 'content_translation_source' => '',
      // 'content_translation_uid' => '',
      // 'metatag' => '',
      // 'default_langcode' => [(object) ['value' => TRUE]],
      'langcode' => [(object) ['value' => $langcode]],
      'menu_tree' => [0 => (object) $menuTree],
      'name' => [(object) ['value' => $site_name]],
      'project' => [(object) ['value' => $project_name]],
      'status' => [(object) ['value' => TRUE]],
      'uuid' => [(object) ['value' => $this->configFactory->get('system.site')->get('uuid')]],
      'weight' => [(object) ['value' => 0]],
    ];

    // Add local menu to the api response.
    $apiResponse->data->{$project_name} = $site_data;

    return new ResourceResponse(json_decode(json_encode($apiResponse->data), TRUE), 200);
  }

  /**
   * Create menu tree from local main menu.
   *
   * @return array
   *   Menu tree.
   *
   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
   */
  protected function getTreeFromMainMenu(): array {
    $menuId = 'main';
    $langcode = $this->languageManager->getCurrentLanguage()->getId();
    $instanceUri = Url::fromRoute('<front>', options: [
      'language' => $this->languageManager->getLanguage($langcode),
    ]);

    $sitename = $this->languageManager
      ->getLanguageConfigOverride($langcode, 'system.site')
      ->get('name');

    // Fallback to default translation if site name is not translated to
    // given language.
    if (!$sitename) {
      $sitename = $this->configFactory->get('system.site')
        ->getOriginal('name', FALSE);
    }

    if (!$sitename) {
      throw new \InvalidArgumentException('Missing "system.site[name]" configuration.');
    }

    return $this->localMenuTreeBuilder->build(
      $menuId,
      $langcode,
      (object) [
        'id' => vsprintf(
          'base:%s',
          [preg_replace('/[^a-z0-9_]+/', '_', strtolower($sitename))]
        ),
        'name' => $sitename,
        'url' => $instanceUri,
      ]
    );
  }

}
