<?php

/**
 * @file
 * Contains installation hooks for 'helfi_news_feed' module.
 */

declare(strict_types = 1);

use Drupal\block\Entity\Block;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\helfi_platform_config\ConfigHelper;

/**
 * Implements hook_install().
 */
function helfi_navigation_install($is_syncing) : void {
  // Do not perform following steps if the module is being installed as part
  // of a configuration import.
  if ($is_syncing) {
    return;
  }

  /** @var \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler */
  $theme_handler = \Drupal::service('theme_handler');

  if (!str_starts_with($theme_handler->getDefault(), 'hdbt')) {
    return;
  }
  // Generate global navigation blocks.
  _helfi_navigation_generate_blocks($theme_handler->getDefault());

  // Delete old instance specific menu blocks.
  $old_menu_blocks = [
    'footertopblock',
    'footertopnavigation',
    'footertopnavigationsecond',
    'footerbottomnavigation',
    'headertopnavigation',
    'mobile_navigation',
  ];
  $delete = [];

  foreach ($old_menu_blocks as $block) {
    $delete[] = $block;
    if ($theme_handler->getDefault() === 'hdbt_subtheme') {
      $delete[] = 'hdbt_subtheme_' . $block;
    }
  }

  /** @var \Drupal\Core\Entity\EntityStorageInterface $block_storage */
  $block_storage = \Drupal::service('entity_type.manager')->getStorage('block');
  foreach ($block_storage->loadMultiple($delete) as $block) {
    $block->delete();
  }

  update_user_rest_permissions();

}

/**
 * Gets the block configuration.
 *
 * @return array[]
 *   The block configuration.
 */
function _helfi_navigation_get_block_configuration() : array {
  return [
    'external_fallback_menu' => [
      'plugin' => 'external_menu_block_fallback',
      'region' => 'header_branding',
      'settings' => [
        'label' => 'External - Fallback menu',
        'expand_all_items' => TRUE,
        'depth' => 0,
      ],
    ],
    'external_footer_bottom_navigation' => [
      'plugin' => 'external_menu_block:footer-bottom-navigation',
      'region' => 'footer_bottom',
      'settings' => [
        'label' => 'External - Footer bottom navigation',
      ],
    ],
    'external_footer_top_navigation' => [
      'plugin' => 'external_menu_block:footer-top-navigation',
      'region' => 'footer_top',
      'settings' => [
        'label' => 'City of Helsinki',
        'label_display' => 'visible',
      ],
      'weight' => 1,
      'translations' => [
        'fi' => 'Helsingin kaupunki',
        'sv' => 'Helsingfors stad',
      ],
    ],
    'external_footer_top_navigation_2' => [
      'plugin' => 'external_menu_block:footer-top-navigation-2',
      'region' => 'footer_top',
      'settings' => [
        'label' => 'Connect',
        'label_display' => 'visible',
      ],
      'weight' => 2,
      'translations' => [
        'fi' => 'Ota yhteyttÃ¤',
        'sv' => 'Ta kontakt',
      ],
    ],
    'external_header_language_links' => [
      'plugin' => 'external_menu_block:header-language-links',
      'region' => 'header_branding',
      'settings' => [
        'label' => 'External - Header language links',
        'depth' => 2,
        'expand_all_items' => TRUE,
      ],
    ],
    'external_header_top_navigation' => [
      'plugin' => 'external_menu_block:header-top-navigation',
      'region' => 'header_top',
      'settings' => [
        'label' => 'External - Header top navigation',
      ],
    ],
    'external_menu_mega_menu' => [
      'plugin' => 'external_menu_block_main_navigation',
      'region' => 'header_branding',
      'settings' => [
        'label' => 'External - Mega menu',
        'depth' => 2,
        'expand_all_items' => TRUE,
      ],
    ],
  ];
}

/**
 * Generate global navigation blocks.
 *
 * @param string $theme
 *   Current default theme machine name.
 * @param string|null $region
 *   The region.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _helfi_navigation_generate_blocks(string $theme, ?string $region = NULL, bool $labelDisplay = FALSE) : void {
  $default_config = [
    'settings' => [
      'label_display' => $labelDisplay,
      'provider' => 'helfi_navigation',
      'level' => 1,
      'depth' => 1,
      'expand_all_items' => FALSE,
    ],
    'langcode' => 'en',
    'status' => TRUE,
    'provider' => NULL,
    'theme' => $theme,
    'visibility' => [],
    'weight' => 0,
  ];

  foreach (_helfi_navigation_get_block_configuration() as $id => $config) {
    $block_config = array_replace_recursive($default_config, $config);

    if ($region) {
      $block_config['region'] = $region;
    }
    $block_config['id'] = $id;
    $block_config['settings']['id'] = $config['plugin'];

    if (array_key_exists('translations', $config)) {
      $translations = $config['translations'];
      unset($config['translations']);

      foreach (['fi', 'sv'] as $lang_code) {
        /** @var \Drupal\language\Config\LanguageConfigOverride $config_translation */
        $config_translation = \Drupal::languageManager()
          ->getLanguageConfigOverride($lang_code, "block.block.$id");
        $config_translation
          ->setData([
            'settings' => [
              'label' => $translations[$lang_code],
            ],
          ])
          ->save();
      }
    }

    $block = Block::create($block_config);
    $block->save();
  }
}

/**
 * Implements hook_uninstall().
 */
function helfi_navigation_uninstall($is_syncing) {
  // Delete Menu queue.
  $queue = \Drupal::queue('helfi_navigation_menu_queue');
  $queue->deleteQueue();
}

/**
 * Add 'lang' field to menu links.
 */
function helfi_navigation_update_9001() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $fields = [];
  $fields['lang_attribute'] = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('Language attribute'))
    ->setDescription(new TranslatableMarkup('The "lang" attribute.'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setSetting('max_length', 10)
    ->setDisplayOptions('form', [
      'type' => 'string_textfield',
    ])
    ->setDisplayConfigurable('form', TRUE);

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'menu_link_content', 'helfi_navigation', $field);
  }
}

/**
 * Update Header language links block settings.
 */
function helfi_navigation_update_9002() : void {
  /** @var \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler */
  $theme_handler = \Drupal::service('theme_handler');

  if (str_starts_with($theme_handler->getDefault(), 'hdbt')) {
    $config_factory = \Drupal::configFactory();
    $block = $config_factory->getEditable('block.block.external_header_language_links');
    $block_data = $block->getRawData();
    if (!empty($block_data)) {
      $block_data['settings']['depth'] = 2;
      $block_data['settings']['expand_all_items'] = TRUE;
      $block->setData($block_data)->save(TRUE);
    }
  }
}

/**
 * Update to enable rest module.
 */
function helfi_navigation_update_9003() : void {
  $module_handler = \Drupal::service('module_handler');

  // Enable modules if necessary.
  if (!$module_handler->moduleExists('rest')) {
    Drupal::service('module_installer')->install(['rest']);
  }
  if (!$module_handler->moduleExists('serialize')) {
    Drupal::service('module_installer')->install(['serialization']);
  }

  // Install config.
  $config_location = dirname(__FILE__) . '/config/install/';
  $config = 'rest.resource.helfi_global_mobile_menu';
  ConfigHelper::installNewConfig($config_location, $config);

  // Update user permissions
  update_user_rest_permissions();

}

/**
 * Update user permissions.
 *
 * @return void
 */
function update_user_rest_permissions() {
  $config_factory = \Drupal::configFactory();

  foreach (['user.role.anonymous', 'user.role.authenticated'] as $config) {
    $role = $config_factory->getEditable($config);
    $raw_data = $role->getRawData();
    $raw_data['dependencies']['config'][] = 'rest.resource.helfi_global_mobile_menu';
    $raw_data['dependencies']['module'][] = 'rest';
    $raw_data['permissions'][] = 'restful get helfi_global_mobile_menu';
    $role->setData($raw_data)->save(TRUE);
  }
}
