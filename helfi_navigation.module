<?php

/**
 * @file
 * Contains alterations for the Hel.fi navigation.
 */

declare(strict_types = 1);

use Drupal\Core\Config\ConfigException;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\helfi_navigation\ApiManager;
use Drupal\menu_link_content\MenuLinkContentInterface;
use Drupal\system\MenuInterface;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function helfi_navigation_theme_suggestions_menu_alter(array &$suggestions, array $variables) : void {
  if ($variables['theme_hook_original'] === 'menu__external_menu') {
    if (isset($variables['menu_type'])) {
      $suggestions[] = 'menu__external_menu__' . $variables['menu_type'];
    }
    if (
      isset($variables['attributes']['block_id']) &&
      str_contains($variables['attributes']['block_id'], 'mega_menu')
    ) {
      $suggestions[] = 'menu__external_menu__mega_menu';
    }
  }
}

/**
 * Implements hook_theme().
 */
function helfi_navigation_theme() : array {
  return [
    'menu__external_menu__fallback' => [
      'variables' => [
        'menu_name' => NULL,
        'items' => [],
        'attributes' => [],
        'menu_link_back' => [],
        'menu_link_current_or_parent' => [],
      ],
    ],
    'menu__external_menu' => [
      'variables' => [
        'menu_type' => NULL,
        'items' => [],
        'attributes' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_entity_base_field_info().
 */
function helfi_navigation_entity_base_field_info(EntityTypeInterface $entity_type) : array {
  $fields = [];

  if ($entity_type->id() === 'menu_link_content') {
    $fields['lang_attribute'] = BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('Language attribute'))
      ->setDescription(new TranslatableMarkup('The "lang" attribute.'))
      ->setTranslatable(TRUE)
      ->setRevisionable(TRUE)
      ->setSetting('max_length', 10)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
      ])
      ->setDisplayConfigurable('form', TRUE);
  }
  return $fields;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_navigation_preprocess_menu__external_menu__fallback(&$variables) : void {
  if (is_array($variables['items']) && !empty($variables['items'])) {
    foreach ($variables['items'] as &$menu_link) {
      $menu_link['next_url'] = clone $menu_link['url'];
      $menu_link['next_url']->setOption('fragment', 'menu');
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function helfi_navigation_menu_update(MenuInterface $entity) : void {
  if ($entity->id() === 'main') {
    _helfi_navigation_queue_item($entity->language()->getId());
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function helfi_navigation_menu_link_content_update(MenuLinkContentInterface $entity) : void {
  if ($entity->getMenuName() === 'main') {
    _helfi_navigation_queue_item($entity->language()->getId());
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function helfi_navigation_menu_link_content_insert(MenuLinkContentInterface $entity) : void {
  if ($entity->getMenuName() === 'main') {
    _helfi_navigation_queue_item($entity->language()->getId());
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function helfi_navigation_menu_link_content_delete(MenuLinkContentInterface $entity) : void {
  if ($entity->getMenuName() === 'main') {
    _helfi_navigation_queue_item($entity->language()->getId());
  }
}

/**
 * Create menu update queue item.
 */
function _helfi_navigation_queue_item(string $langcode) : void {
  $menuUpdater = Drupal::service('helfi_navigation.menu_updater');

  // Fallback to currently active language if item has no language.
  if ($langcode === LanguageInterface::LANGCODE_NOT_SPECIFIED) {
    $langcode = Drupal::languageManager()
      ->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
  }
  try {
    $status = $menuUpdater->syncMenu($langcode);

    if (!$status) {
      Drupal::messenger()->addWarning(t("Global navigation was synced successfully, but won't be visible until published manually."));
    }
    else {
      Drupal::messenger()->addMessage(t('Global navigation was synced successfully!'));
    }
  }
  catch (ConfigException) {
    Drupal::messenger()->addWarning(t('Global navigation sync failed because API keys are not set.'));
  }
  catch (Exception $e) {
    Drupal::messenger()->addWarning(t('Global navigation sync failed: @reason The item will be placed in a queue and will be synced again later.', [
      '@reason' => $e->getMessage(),
    ]));
    // Queue item if the synchronization failed.
    $queue = Drupal::queue('helfi_navigation_menu_queue');
    $queue->createItem($langcode);
  }
}

/**
 * Implements hook_cron().
 */
function helfi_navigation_cron() : void {
  /** @var \Drupal\helfi_navigation\CacheWarmer $warmer */
  $warmer = Drupal::service('helfi_navigation.cache_warmer');
  $warmer->warm();
}

/**
 * Implements hook_page_attachments().
 */
function helfi_navigation_page_attachments(array &$attachments) {
  $langcode = Drupal::languageManager()
    ->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)
    ->getId();
  /** @var \Drupal\helfi_navigation\ApiManager $apiManager */
  $apiManager = Drupal::service('helfi_navigation.api_manager');

  try {
    $attachments['#attached']['drupalSettings']['helfi_navigation'] = [
      'links' => [
        'api' => $apiManager->getUrl('js', $langcode, ['endpoint' => ApiManager::GLOBAL_MENU_ENDPOINT]),
        'canonical' => $apiManager->getUrl('canonical', $langcode),
      ],
    ];
  }
  catch (\Exception) {
  }
}
