<?php

/**
 * @file
 * Contains alterations for the Hel.fi navigation.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\menu_link_content\MenuLinkContentInterface;
use Drupal\system\MenuInterface;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function helfi_navigation_theme_suggestions_menu_alter(array &$suggestions, array $variables) : void {
  if ($variables['theme_hook_original'] === 'menu__external_menu') {
    if (isset($variables['menu_type'])) {
      $suggestions[] = 'menu__external_menu__' . $variables['menu_type'];
    }
    if (
      isset($variables['attributes']['block_id']) &&
      str_contains($variables['attributes']['block_id'], 'mega_menu')
    ) {
      $suggestions[] = 'menu__external_menu__mega_menu';
    }
  }
}

/**
 * Implements hook_theme().
 */
function helfi_navigation_theme() : array {
  return [
    'menu__external_menu__fallback' => [
      'variables' => [
        'menu_name' => NULL,
        'items' => [],
        'attributes' => [],
        'menu_link_back' => [],
        'menu_link_current_or_parent' => [],
      ],
    ],
    'menu__external_menu' => [
      'variables' => [
        'menu_type' => NULL,
        'items' => [],
        'attributes' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_entity_base_field_info().
 */
function helfi_navigation_entity_base_field_info(EntityTypeInterface $entity_type) : array {
  $fields = [];

  if ($entity_type->id() === 'menu_link_content') {
    $fields['lang_attribute'] = BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('Language attribute'))
      ->setDescription(new TranslatableMarkup('The "lang" attribute.'))
      ->setTranslatable(TRUE)
      ->setRevisionable(TRUE)
      ->setSetting('max_length', 10)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
      ])
      ->setDisplayConfigurable('form', TRUE);
  }
  return $fields;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_navigation_preprocess_menu__external_menu__fallback(&$variables) : void {
  if (is_array($variables['items']) && !empty($variables['items'])) {
    foreach ($variables['items'] as &$menu_link) {
      $menu_link['next_url'] = clone $menu_link['url'];
      $menu_link['next_url']->setOption('fragment', 'menu');
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function helfi_navigation_menu_update(MenuInterface $entity) : void {
  _helfi_navigation_queue_item($entity->id(), $entity->language()->getId(), 'update');
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function helfi_navigation_menu_link_content_update(MenuLinkContentInterface $entity) : void {
  _helfi_navigation_queue_item($entity->getMenuName(), $entity->language()->getId(), 'update');
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function helfi_navigation_menu_link_content_insert(MenuLinkContentInterface $entity) : void {
  _helfi_navigation_queue_item($entity->getMenuName(), $entity->language()->getId(), 'insert');
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function helfi_navigation_menu_link_content_delete(MenuLinkContentInterface $entity) : void {
  _helfi_navigation_queue_item($entity->getMenuName(), $entity->language()->getId(), 'delete');
}

/**
 * Create menu update queue item.
 */
function _helfi_navigation_queue_item(string $menuName, string $langcode, string $action) : void {
  if (!\Drupal::service('helfi_navigation.api_authorization')->getAuthorization()) {
    return;
  }
  $queue = Drupal::queue('helfi_navigation_menu_queue');

  static $items = [];

  $key = sprintf('%s:%s:%s', $menuName, $langcode, $action);

  // Queue item once per request.
  if (!isset($items[$key])) {
    $queue->createItem(['menu' => $menuName, 'language' => $langcode]);
    $items[$key] = $key;
  }
}

/**
 * Implements hook_page_attachments().
 */
function helfi_navigation_page_attachments(array &$attachments) : void {
  /** @var \Drupal\helfi_api_base\Language\DefaultLanguageResolver $defaultLanguageResolver */
  $defaultLanguageResolver = Drupal::service('helfi_api_base.default_language_resolver');

  // Languages without standard support should use fallback language in menu.
  $langcode = $defaultLanguageResolver->getCurrentOrFallbackLanguage();

  /** @var \Drupal\helfi_navigation\ApiManager $apiManager */
  $apiManager = Drupal::service('helfi_navigation.api_manager');

  try {
    $attachments['#attached']['drupalSettings']['helfi_navigation'] = [
      'links' => [
        'api' => $apiManager->getUrl('js', $langcode, ['endpoint' => '/api/v1/global-mobile-menu']),
        'canonical' => $apiManager->getUrl('canonical', $langcode),
      ],
    ];
  }
  catch (\Exception) {
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 */
function helfi_navigation_form_node_form_alter(
  array &$form,
  FormStateInterface $form_state
) :void {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  $defaults = menu_ui_get_menu_link_defaults($node) + [
    'content_translation_status' => FALSE,
  ];

  if ($defaults['entity_id']) {
    $link = MenuLinkContent::load($defaults['entity_id']);

    if ($link->hasTranslation($node->language()->getId())) {
      $link = $link->getTranslation($node->language()->getId());
    }
    $defaults['content_translation_status'] = $link->get('content_translation_status')->value;
  }

  // Show menu link's 'published' field on node edit form.
  $form['menu']['content_translation_status'] = [
    '#type' => 'checkbox',
    '#title' => t('Published in the main menu'),
    '#description' => t('The selection will publish the page in hel.fiâ€™s main and mobile menu. Set the selection as Published when you choose Provide a menu link from above. The page will not show up in the main menu or mobile menu without this selection.'),
    '#default_value' => $defaults['content_translation_status'],
  ];
  $form['actions']['submit']['#submit'][] = 'helfi_navigation_form_node_form_submit';
}

/**
 * A form submit callback for helfi_navigation_form_node_form_alter().
 */
function helfi_navigation_form_node_form_submit(array $form, FormStateInterface $formState) : void {
  $values = $formState->getValue('menu');
  $node = $formState->getFormObject()->getEntity();
  $langCode = $node->language()->getId();

  if (!empty($values['entity_id'])) {
    if (!$link = MenuLinkContent::load($values['entity_id'])) {
      return;
    }

    if ($link->hasTranslation($langCode)) {
      $link = $link->getTranslation($langCode);
    }

    if (isset($values['content_translation_status'])) {
      $link->set('content_translation_status', $values['content_translation_status'])
        ->save();
    }
  }
}
